#!/usr/bin/env python3
"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	T_n=n(n+1)/2	1, 3, 6, 10, 15, ...
Pentagonal	 	P_n=n(3n−1)/2	1, 5, 12, 22, 35, ...
Hexagonal	 	H_n=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T_285 = P_165 = H_143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""

from helpers import print_memory_usage_report, print_time_elapsed
from time import time
import tracemalloc


def find_triangle_nums(number_of_nums_to_find: int) -> set[int]:
    return {n * (n + 1) / 2 for n in range(1, number_of_nums_to_find)}


def find_pentagonal_nums(number_of_nums_to_find: int) -> set[int]:
    return {n * (3 * n - 1) / 2 for n in range(1, number_of_nums_to_find)}


def find_hexagonal_nums(number_of_nums_to_find: int) -> set[int]:
    return {n * (2 * n - 1) for n in range(1, number_of_nums_to_find)}


def main():
    # Keep track of time elapsed and memory used
    start_time = time()
    tracemalloc.start()

    # ********** Solution begins here ********** #

    FIRST_COMMON_NUMBER = 40_755
    LIMIT = 100_000
    triangle_nums = find_triangle_nums(LIMIT)
    pentagonal_nums = find_pentagonal_nums(LIMIT)
    hexagonal_nums = find_hexagonal_nums(LIMIT)

    answer = 0
    for num in triangle_nums:
        if num in pentagonal_nums and num in hexagonal_nums:
            if num > FIRST_COMMON_NUMBER:
                answer = num
                break

    print(f"Next triangle number that is also pentagonal and hexagonal:\n\n\t{answer}\n")

    # ********** Solution ends here ********** #

    # Stop tracking time and memory
    snapshot = tracemalloc.take_snapshot()
    end_time = time()
    tracemalloc.stop()

    # Print time elapsed and memory used
    print_time_elapsed(start_time, end_time)
    print_memory_usage_report(snapshot)


if __name__ == "__main__":
    main()
