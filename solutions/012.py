#!/usr/bin/python3
'''
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

from helpers import print_memory_usage_report, print_time_elapsed
from time import time
import tracemalloc

from itertools import count
from math import floor, sqrt


def _count_divisors(num: int) -> int:
    if not num:
        return 0  # Well, every non-zero number divides 0 evenly...

    num = abs(num)
    if num == 1:
        return 1

    divisors = 2  # 1 and num

    # We only need to check up to the square root of num;
    # if a number less than the square root of num divides num,
    # then so does a number greater than the square root of num.
    for potential_divisor in range(2, floor(sqrt(num)) + 1):
        if num % potential_divisor == 0:
            if potential_divisor == floor(sqrt(num)):
                divisors += 1
            else:
                divisors += 2

    return divisors


def main():
    # Keep track of time elapsed and memory used
    start_time = time()
    tracemalloc.start()

    # ********** Solution begins here ********** #

    # Iterate over triangle numbers
    triangle_number = 0
    first_with_more_than_500_divisors = None

    for natural_number in count(start=1):
        triangle_number += natural_number

        if _count_divisors(triangle_number) > 500:
            first_with_more_than_500_divisors = triangle_number
            break

    print(f'First triangle number with more than 500 divisors:\n\n\t{first_with_more_than_500_divisors}\n')

    # ********** Solution ends here ********** #

    # Stop tracking time and memory
    snapshot = tracemalloc.take_snapshot()
    end_time = time()
    tracemalloc.stop()

    # Print time elapsed and memory used
    print_time_elapsed(start_time, end_time)
    print_memory_usage_report(snapshot)


if __name__ == '__main__':
    main()
